# Ignore environment variable files
.env
.env.local
.env.*.local
 
# Ignore particular files
sample.txt

# Ignore Node.js related files and directories
s3/sdk/node.js/node_modules/
s3/sdk/node.js/npm-debug.log*
s3/sdk/node.js/yarn-debug.log*
s3/sdk/node.js/yarn-error.log*
s3/sdk/node.js/dist/
s3/sdk/node.js/build/
s3/sdk/node.js/package-lock.json
s3/sdk/node.js/yarn.lock

# Ignore Ruby related files and directories
s3/sdk/ruby/.env
s3/sdk/ruby/*.log
s3/sdk/ruby/tmp/
s3/sdk/ruby/log/
s3/sdk/ruby/vendor/bundle/
s3/sdk/ruby/.rbenv-gemsets
s3/sdk/ruby/.ruby-version
s3/sdk/ruby/.ruby-gemset
s3/sdk/ruby/coverage/

# Ignore editor-specific backup files
.sass-cache/
byebug_history

# Ignore terraform files

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
